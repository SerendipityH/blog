<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雅俗共赏</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/blog/"/>
  <updated>2020-02-19T13:13:50.840Z</updated>
  <id>http://yoursite.com/blog/</id>
  
  <author>
    <name>serendipityh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo命令</title>
    <link href="http://yoursite.com/blog/2020/02/19/hexo%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/blog/2020/02/19/hexo命令/</id>
    <published>2020-02-19T09:12:17.000Z</published>
    <updated>2020-02-19T13:13:50.840Z</updated>
    
    <content type="html"><![CDATA[<h1>hexo命令（自己常用的几个）</h1><a id="more"></a><p>好久没用很多命令都忘了,今天记一下<br><code>hexo new  "****" </code> # 新建文章  😄<br><code>hexo g </code> #生成静态页面至public目录  😄<br><code>hexo s</code>  #开启预览访问端口（默认端口4000，'ctrl + c’关闭server）😄<br><code>hexo d</code> #部署上传 😄<br><code>hexo clean</code>  #clean清一下😄</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;hexo命令（自己常用的几个）&lt;/h1&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/blog/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/blog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>docker 抓取出错</title>
    <link href="http://yoursite.com/blog/2019/08/01/docker-%E6%8A%93%E5%8F%96%E5%87%BA%E9%94%99/"/>
    <id>http://yoursite.com/blog/2019/08/01/docker-抓取出错/</id>
    <published>2019-08-01T11:47:14.000Z</published>
    <updated>2019-08-01T12:04:16.262Z</updated>
    
    <content type="html"><![CDATA[<p>在使用docker命令时出现错误，一直以为源有问题，后来才发现是网络有问题。<br><img src="/images/problem/docker.bmp" alt=""><br>修改网络配置<br><img src="/images/problem/problem1.bmp" alt=""></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route add default gw 192.168.31.1</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/problem/problem2.bmp" alt=""></p><p>终于好了 ！！！<br><img src="/images/problem/problem3.bmp" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用docker命令时出现错误，一直以为源有问题，后来才发现是网络有问题。&lt;br&gt;
&lt;img src=&quot;/images/problem/docker.bmp&quot; alt=&quot;&quot;&gt;&lt;br&gt;
修改网络配置&lt;br&gt;
&lt;img src=&quot;/images/problem/problem
      
    
    </summary>
    
      <category term="日常问题" scheme="http://yoursite.com/blog/categories/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="日常问题" scheme="http://yoursite.com/blog/tags/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>上传jar包到maven私服问题</title>
    <link href="http://yoursite.com/blog/2019/07/02/%E4%B8%8A%E4%BC%A0jar%E5%8C%85%E5%88%B0maven%E7%A7%81%E6%9C%8D%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/blog/2019/07/02/上传jar包到maven私服问题/</id>
    <published>2019-07-02T10:46:31.000Z</published>
    <updated>2019-07-07T03:06:15.696Z</updated>
    
    <content type="html"><![CDATA[<p>因为电脑的系统是win10，所以信息都要加上""。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为电脑的系统是win10，所以信息都要加上&quot;&quot;。&lt;/p&gt;
&lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.
      
    
    </summary>
    
      <category term="日常问题" scheme="http://yoursite.com/blog/categories/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="日常问题" scheme="http://yoursite.com/blog/tags/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud学习（3）</title>
    <link href="http://yoursite.com/blog/2019/06/03/SpringCloud%E5%AD%A6%E4%B9%A0%EF%BC%883%EF%BC%89/"/>
    <id>http://yoursite.com/blog/2019/06/03/SpringCloud学习（3）/</id>
    <published>2019-06-03T12:07:45.000Z</published>
    <updated>2019-06-04T12:09:59.640Z</updated>
    
    <content type="html"><![CDATA[<h1>搭建高可用Eureka注册中心（Eureka集群）</h1><a id="more"></a><p>在项目中添加多个配置文件，并且使用SpringBoot的多环境配置方式。集群中需要几个节点就添加多少配置文件</p><h2 id="eureka1">eureka1</h2><p>application-eureka1.properties</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=eureka-server</span><br><span class="line">server.port=8761</span><br><span class="line"></span><br><span class="line">#设置eureka 实例名称，与配置文件的变量为主</span><br><span class="line">eureka.instance.hostname=eureka1</span><br><span class="line">#设置服务注册中心地址，指向另一个注册中心</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://eureka2:8761/eureka/</span><br></pre></td></tr></tbody></table></figure><h2 id="eureka2">eureka2</h2><p>application-eureka2.properties</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=eureka-server</span><br><span class="line">server.port=8761</span><br><span class="line"></span><br><span class="line">#设置eureka 实例名称，与配置文件的变量为主</span><br><span class="line">eureka.instance.hostname=eureka2</span><br><span class="line">#设置服务注册中心地址，指向另一个注册中心</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://eureka1:8761/eureka/</span><br></pre></td></tr></tbody></table></figure><h2 id="Eureka集群部署">Eureka集群部署</h2><h3 id="项目打包">项目打包</h3><p>右键项目-&gt;run as -&gt;maven install</p><p>在/usr/local下创建eureka目录<br>将jar上传到该目录</p><h3 id="编写启动脚本">编写启动脚本</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line"> </span><br><span class="line">cd `dirname $0`</span><br><span class="line"> </span><br><span class="line">CUR_SHELL_DIR=`pwd`</span><br><span class="line">CUR_SHELL_NAME=`basename ${BASH_SOURCE}`</span><br><span class="line"> </span><br><span class="line">JAR_NAME="springcloud-eureka-server-ha-0.0.1-SNAPSHOT.jar"</span><br><span class="line">JAR_PATH=$CUR_SHELL_DIR/$JAR_NAME</span><br><span class="line"> </span><br><span class="line">#JAVA_MEM_OPTS=" -server -Xms1024m -Xmx1024m -XX:PermSize=128m"</span><br><span class="line">JAVA_MEM_OPTS=""</span><br><span class="line"> </span><br><span class="line">SPRING_PROFILES_ACTIV="-Dspring.profiles.active=eureka2"</span><br><span class="line">#SPRING_PROFILES_ACTIV=""</span><br><span class="line">LOG_DIR=$CUR_SHELL_DIR/logs</span><br><span class="line">LOG_PATH=$LOG_DIR/${JAR_NAME%..log</span><br><span class="line"> </span><br><span class="line">echo_help()</span><br><span class="line">{</span><br><span class="line">    echo -e "syntax: sh $CUR_SHELL_NAME start|stop"</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line">if [ -z $1 ];then</span><br><span class="line">    echo_help</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"> </span><br><span class="line">if [ ! -d "$LOG_DIR" ];then</span><br><span class="line">    mkdir "$LOG_DIR"</span><br><span class="line">fi</span><br><span class="line"> </span><br><span class="line">if [ ! -f "$LOG_PATH" ];then</span><br><span class="line">    touch "$LOG_DIR"</span><br><span class="line">fi</span><br><span class="line"> </span><br><span class="line">if [ "$1" == "start" ];then</span><br><span class="line"> </span><br><span class="line">    # check server</span><br><span class="line">    PIDS=`ps --no-heading -C java -f --width 1000 | grep $JAR_NAME | awk '{print $2}'`</span><br><span class="line">    if [ -n "$PIDS" ]; then</span><br><span class="line">        echo -e "ERROR: The $JAR_NAME already started and the PID is ${PIDS}."</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line"> </span><br><span class="line">    echo "Starting the $JAR_NAME..."</span><br><span class="line"> </span><br><span class="line">    # start</span><br><span class="line">    nohup java $JAVA_MEM_OPTS -jar $SPRING_PROFILES_ACTIV $JAR_PATH &gt;&gt; $LOG_PATH 2&gt;&amp;1 &amp;</span><br><span class="line"> </span><br><span class="line">    COUNT=0</span><br><span class="line">    while [ $COUNT -lt 1 ]; do</span><br><span class="line">        sleep 1</span><br><span class="line">        COUNT=`ps  --no-heading -C java -f --width 1000 | grep "$JAR_NAME" | awk '{print $2}' | wc -l`</span><br><span class="line">        if [ $COUNT -gt 0 ]; then</span><br><span class="line">            break</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">    PIDS=`ps  --no-heading -C java -f --width 1000 | grep "$JAR_NAME" | awk '{print $2}'`</span><br><span class="line">    echo "${JAR_NAME} Started and the PID is ${PIDS}."</span><br><span class="line">    echo "You can check the log file in ${LOG_PATH} for details."</span><br><span class="line"> </span><br><span class="line">elif [ "$1" == "stop" ];then</span><br><span class="line"> </span><br><span class="line">    PIDS=`ps --no-heading -C java -f --width 1000 | grep $JAR_NAME | awk '{print $2}'`</span><br><span class="line">    if [ -z "$PIDS" ]; then</span><br><span class="line">        echo "ERROR:The $JAR_NAME does not started!"</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line"> </span><br><span class="line">    echo -e "Stopping the $JAR_NAME..."</span><br><span class="line"> </span><br><span class="line">    for PID in $PIDS; do</span><br><span class="line">        kill $PID &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">    done</span><br><span class="line"> </span><br><span class="line">    COUNT=0</span><br><span class="line">    while [ $COUNT -lt 1 ]; do</span><br><span class="line">        sleep 1</span><br><span class="line">        COUNT=1</span><br><span class="line">        for PID in $PIDS ; do</span><br><span class="line">            PID_EXIST=`ps --no-heading -p $PID`</span><br><span class="line">            if [ -n "$PID_EXIST" ]; then</span><br><span class="line">                COUNT=0</span><br><span class="line">                break</span><br><span class="line">            fi</span><br><span class="line">        done</span><br><span class="line">    done</span><br><span class="line"> </span><br><span class="line">    echo -e "${JAR_NAME} Stopped and the PID is ${PIDS}."</span><br><span class="line">else</span><br><span class="line">    echo_help</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure><p>其中JAR_NAME 和SPRING_PROFILES_ACTIV需要修改<br>添加启动权限</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 755 server.sh</span><br></pre></td></tr></tbody></table></figure><h3 id="修改linux的host文件">修改linux的host文件</h3><p>vim /etc/hosts<br><img src="/images/SpringCloud/SpringCloud2.bmp" alt=""></p><h3 id="启动脚本">启动脚本</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost eureka]# ./server.sh start</span><br></pre></td></tr></tbody></table></figure><h3 id="通过浏览器访问注册中心的管理页面">通过浏览器访问注册中心的管理页面</h3><p>192.168.25.128<br><img src="/images/SpringCloud/SpringCloud3.bmp" alt=""><br>192.168.25.129<br><img src="/images/SpringCloud/SpringCloud4.bmp" alt=""></p><h1>创建provider服务</h1><h2 id="1-创建项目，修改pom文件">1.创建项目，修改pom文件</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">&lt;project xmlns="http://maven.apache.org/POM/4.0.0"</span><br><span class="line">xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="line">xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5.13.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;groupId&gt;com.serendipity&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springcloud-eureka-provider&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;name&gt;springcloud-eureka-provider&lt;/name&gt;</span><br><span class="line">&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;Dalston.SR5&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="2-在启动类加上-EnableEurekaClient注解">2.在启动类加上@EnableEurekaClient注解</h2><h2 id="3-修改配置文件">3.修改配置文件</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=eureka-provider</span><br><span class="line">server.port=9090</span><br><span class="line"></span><br><span class="line">#设置服务注册中心地址，指向另一个注册中心</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://eureka1:8761/eureka/,http://eureka2:8761/eureka/</span><br></pre></td></tr></tbody></table></figure><h2 id="4-修改windows-的host-文件">4.修改windows 的host 文件</h2><p><img src="/images/SpringCloud/SpringCloud5.bmp" alt=""></p><h2 id="5-编写pojo">5.编写pojo</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public class User {</span><br><span class="line">    private Integer userid;</span><br><span class="line">    private String username;</span><br><span class="line">    private Integer userage;</span><br><span class="line"></span><br><span class="line">    public Integer getUserid() {</span><br><span class="line">        return userid;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setUserid(Integer userid) {</span><br><span class="line">        this.userid = userid;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public String getUsername() {</span><br><span class="line">        return username;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username) {</span><br><span class="line">        this.username = username;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public Integer getUserage() {</span><br><span class="line">        return userage;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setUserage(Integer userage) {</span><br><span class="line">        this.userage = userage;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public User(Integer userid, String username, Integer userage) {</span><br><span class="line">        super();</span><br><span class="line">        this.userid = userid;</span><br><span class="line">        this.username = username;</span><br><span class="line">        this.userage = userage;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public User() {</span><br><span class="line">        super();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="6-编写服务接口">6.编写服务接口</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UsersController {</span><br><span class="line">    </span><br><span class="line">    @RequestMapping("/user")</span><br><span class="line">    public List&lt;User&gt; getUsers() {</span><br><span class="line">        List&lt;User&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(new User(1, "zhangsan", 20));</span><br><span class="line">        list.add(new User(2, "lisi", 10));</span><br><span class="line">        list.add(new User(3, "wangwu", 30));</span><br><span class="line">        return list;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="7-通过浏览器访问">7.通过浏览器访问</h2><p>这时已经将服务注册到Eureka<br><img src="/images/SpringCloud/SpringCloud6.bmp" alt=""></p><h1>在高可用的Eureka 注册中心中构建consumer 服务</h1><h2 id="Consumer的配置文件">Consumer的配置文件</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=eureka-consumer</span><br><span class="line">server.port=9091</span><br><span class="line"></span><br><span class="line">#设置服务注册中心地址，指向另一个注册中心</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://eureka1:8761/eureka/,http://eureka2:8761/eureka/</span><br></pre></td></tr></tbody></table></figure><h2 id="在Service-中完成服务的调用">在Service 中完成服务的调用</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserService {</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private LoadBalancerClient loadBalancerClient; // 负载均衡</span><br><span class="line"></span><br><span class="line">    public List&lt;User&gt; getUsers() {</span><br><span class="line">        // 选择调用服务的名称</span><br><span class="line">        // ServiceInstance 封装了服务的基本信息，如IP、端口</span><br><span class="line">        ServiceInstance sInstance = loadBalancerClient.choose("eureka-provider");</span><br><span class="line">        // 拼接访问服务的URL</span><br><span class="line">        StringBuffer sb = new StringBuffer();</span><br><span class="line">        sb.append("http://").append(sInstance.getHost()).append(":").append(sInstance.getPort())</span><br><span class="line">                .append("/user");</span><br><span class="line"></span><br><span class="line">        // springMVC RestTemplate</span><br><span class="line">        RestTemplate rTemplate = new RestTemplate();</span><br><span class="line">        ParameterizedTypeReference&lt;List&lt;User&gt;&gt; type =</span><br><span class="line">                new ParameterizedTypeReference&lt;List&lt;User&gt;&gt;() {};</span><br><span class="line">        // 封装了返回值信息</span><br><span class="line">        ResponseEntity&lt;List&lt;User&gt;&gt; responseEntity =</span><br><span class="line">                rTemplate.exchange(sb.toString(), HttpMethod.GET, null, type);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; list = responseEntity.getBody();</span><br><span class="line">        return list;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="编写controller">编写controller</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UsersController {</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping("/consumer")</span><br><span class="line">    public List&lt;User&gt; getUsers() {</span><br><span class="line"></span><br><span class="line">        return userService.getUsers();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="启动访问">启动访问</h2><p><img src="/images/SpringCloud/SpringCloud7.bmp" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;搭建高可用Eureka注册中心（Eureka集群）&lt;/h1&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="http://yoursite.com/blog/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/blog/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud 学习（2）</title>
    <link href="http://yoursite.com/blog/2019/06/02/SpringCloud-%E5%AD%A6%E4%B9%A0%EF%BC%882%EF%BC%89/"/>
    <id>http://yoursite.com/blog/2019/06/02/SpringCloud-学习（2）/</id>
    <published>2019-06-02T14:38:26.000Z</published>
    <updated>2019-06-03T12:13:13.534Z</updated>
    
    <content type="html"><![CDATA[<h1>Eureka 服务注册中心</h1><a id="more"></a><h2 id="什么服务注册中心">什么服务注册中心</h2><p>服务注册中心是服务实现服务化管理的核心组件,类似于目录服务的作用,主要用来存储服务信息，譬如提供者url 串、路由信息等。服务注册中心是SOA 架构中最基础的设施之一。</p><h3 id="1-什么是Eureka注册中心">1.什么是Eureka注册中心</h3><p>Eureka 是Netflix 开发的服务发现组件，本身是一个基于REST 的服务。Spring Cloud将它集成在其子项目spring-cloud-netflix 中，以实现Spring Cloud 的服务注册于发现，同时还提供了负载均衡、故障转移等能力。</p><h3 id="2-Eureka注册中心三种角色">2.Eureka注册中心三种角色</h3><h4 id="Eureka-Server">Eureka Server</h4><p>通过Register、Get、Renew 等接口提供服务的注册和发现。</p><h4 id="Application-Service-Service-Provider">Application Service (Service Provider)</h4><p>服务提供方<br>把自身的服务实例注册到Eureka Server 中</p><h4 id="Application-Client-Service-Consumer">Application Client (Service Consumer)</h4><p>服务调用方<br>通过Eureka Server 获取服务列表，消费服务。</p><h2 id="Eureka入门案例">Eureka入门案例</h2><h3 id="创建maven项目，在pom文件中添加依赖">创建maven项目，在pom文件中添加依赖</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">&lt;project xmlns="http://maven.apache.org/POM/4.0.0"</span><br><span class="line">xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="line">xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5.13.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;groupId&gt;com.serendipity&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springcloud-eureka-server&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;name&gt;springcloud-eureka-server&lt;/name&gt;</span><br><span class="line">&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;Dalston.SR5&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="在启动类上添加注解">在启动类上添加注解</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@EnableEurekaServer</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class EurekaApplication {</span><br><span class="line">public static void main(String[] args) {</span><br><span class="line">SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="修改application-properties全局配置文件">修改application.properties全局配置文件</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=eureka-server</span><br><span class="line">server.port=8761</span><br><span class="line"></span><br><span class="line">#是否将自己注册到Eureka-Server,默认为true</span><br><span class="line">eureka.client.registerWithEureka=false</span><br><span class="line"></span><br><span class="line">#是否从Eureka-Server中获取服务注册信息,默认为true</span><br><span class="line">eureka.client.fetchRegistry=false</span><br></pre></td></tr></tbody></table></figure><p>如果不设为false,会在启动的时候报错</p><h3 id="通过浏览器访问Eureka-Server-服务管理平台">通过浏览器访问Eureka-Server 服务管理平台</h3><p><img src="/images/SpringCloud/SpringCloud1.bmp" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;Eureka 服务注册中心&lt;/h1&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="http://yoursite.com/blog/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/blog/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习（11）</title>
    <link href="http://yoursite.com/blog/2019/05/30/SpringBoot%E5%AD%A6%E4%B9%A0%EF%BC%8811%EF%BC%89/"/>
    <id>http://yoursite.com/blog/2019/05/30/SpringBoot学习（11）/</id>
    <published>2019-05-30T13:56:44.000Z</published>
    <updated>2019-05-30T14:25:48.355Z</updated>
    
    <content type="html"><![CDATA[<h1>SpringBoot 全局配置文件讲解</h1><a id="more"></a><h2 id="1-修改内嵌容器的端口号">1.修改内嵌容器的端口号</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8888</span><br></pre></td></tr></tbody></table></figure><h2 id="2-自定义属性配置">2.自定义属性配置</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msg=Hello World</span><br></pre></td></tr></tbody></table></figure><p>获取</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Value("${msg}")</span><br><span class="line">private String msg;</span><br></pre></td></tr></tbody></table></figure><h2 id="3-配置变量引用">3.配置变量引用</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello=apple</span><br><span class="line"></span><br><span class="line">msg=Hello World ${hello}</span><br></pre></td></tr></tbody></table></figure><p>页面显示<br><img src="/images/SpringBoot/SpringBoot17.bmp" alt=""></p><h2 id="4-随机值配置">4.随机值配置</h2><h3 id="随机值">随机值</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num=${random.int}</span><br></pre></td></tr></tbody></table></figure><p>用处：配置随机值，在程序中如果有一些运算需要一个随机值，那么可以使用该方式来<br>生成。注意，只生成一次。</p><h3 id="随机端口">随机端口</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=${random.int[1024,9999]}</span><br></pre></td></tr></tbody></table></figure><p>用处：在SpringCloud 的微服务中，我们是不需要记录IP 与端口号的。那么我们也就不<br>需要去维护服务的端口号。让他随机生成就可以了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;SpringBoot 全局配置文件讲解&lt;/h1&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/blog/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/blog/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud 学习（1） </title>
    <link href="http://yoursite.com/blog/2019/05/29/SpringCloud-%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/"/>
    <id>http://yoursite.com/blog/2019/05/29/SpringCloud-学习（1）/</id>
    <published>2019-05-29T12:29:45.000Z</published>
    <updated>2019-05-29T14:28:53.473Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-概念定义">1.概念定义</h2><p>SpringCloud是一个微服务框架，相比Dubbo等RPC框架,<strong>SpringCloud提供了全套的分布式系统解决方案</strong>。<br>　　Spring Cloud 对微服务基础框架Netflix 的多个开源组件进行了封装，同时又实现了和云端平台以及和Spring Boot 开发框架的集成。<br>　　Spring Cloud 为微服务架构开发涉及的__配置管理，服务治理，熔断机制，智能路由，微代理，控制总线，一次性token，全局一致性锁，leader 选举，分布式session，集群状态__管理等操作提供了一种简单的开发方式。<br>　　Spring Cloud 为开发者提供了快速构建分布式系统的工具，开发者可以快速的启动服务或构建应用、同时能够快速和云平台资源进行对接。</p><h2 id="2-Spring-Cloud-的子项目">2.Spring Cloud 的子项目</h2><p>Spring Cloud 包含了很多子项目，如：</p><h3 id="2-1Spring-Cloud-Config：配置管理工具，支持使用Git-存储配置内容，支持应">2.1Spring Cloud Config：配置管理工具，支持使用Git 存储配置内容，支持应</h3><p>用配置的外部化存储，支持客户端配置信息刷新、加解密配置内容等</p><h3 id="2-2-Spring-Cloud-Bus：事件、消息总线，用于在集群（例如，配置变化事件）中">2.2 Spring Cloud Bus：事件、消息总线，用于在集群（例如，配置变化事件）中</h3><p>传播状态变化，可与Spring Cloud Config 联合实现热部署。</p><h3 id="2-3Spring-Cloud-Netflix：针对多种Netflix-组件提供的开发工具包，其中包括">2.3Spring Cloud Netflix：针对多种Netflix 组件提供的开发工具包，其中包括</h3><p>Eureka、Hystrix、Zuul、Archaius 等。</p><h4 id="2-3-1Netflix-Eureka：一个基于rest-服务的服务治理组件，包括服务注册中">2.3.1Netflix Eureka：一个基于rest 服务的服务治理组件，包括服务注册中</h4><p>心、服务注册与服务发现机制的实现，实现了云端负载均衡和中间层服务器<br>的故障转移。</p><h4 id="2-3-2Netflix-Hystrix：容错管理工具，实现断路器模式，通过控制服务的节点-从而对延迟和故障提供更强大的容错能力。">2.3.2Netflix Hystrix：容错管理工具，实现断路器模式，通过控制服务的节点,从而对延迟和故障提供更强大的容错能力。</h4><h4 id="2-3-3Netflix-Ribbon：客户端负载均衡的服务调用组件。">2.3.3Netflix Ribbon：客户端负载均衡的服务调用组件。</h4><h4 id="2-3-4Netflix-Feign：基于Ribbon-和Hystrix-的声明式服务调用组件。">2.3.4Netflix Feign：基于Ribbon 和Hystrix 的声明式服务调用组件。</h4><h4 id="2-3-5Netflix-Zuul：微服务网关，提供动态路由，访问过滤等服务。">2.3.5Netflix Zuul：微服务网关，提供动态路由，访问过滤等服务。</h4><h4 id="2-3-6Netflix-Archaius：配置管理API，包含一系列配置管理API，提供动态类型化属性、线程安全配置操作、轮询框架、回调机制等功能。">2.3.6Netflix Archaius：配置管理API，包含一系列配置管理API，提供动态类型化属性、线程安全配置操作、轮询框架、回调机制等功能。</h4><h3 id="2-4Spring-Cloud-for-Cloud-Foundry-：-通过Oauth2-协议绑定服务到">2.4Spring Cloud for Cloud Foundry ： 通过Oauth2 协议绑定服务到</h3><p>CloudFoundry，CloudFoundry 是VMware 推出的开源PaaS 云平台。</p><h3 id="2-5Spring-Cloud-Sleuth：日志收集工具包，封装了Dapper-Zipkin-和HTrace">2.5Spring Cloud Sleuth：日志收集工具包，封装了Dapper,Zipkin 和HTrace</h3><p>操作。</p><h3 id="2-6Spring-Cloud-Data-Flow：大数据操作工具，通过命令行方式操作数据流。">2.6Spring Cloud Data Flow：大数据操作工具，通过命令行方式操作数据流。</h3><h3 id="2-7Spring-Cloud-Security：安全工具包，为你的应用程序添加安全控制，主要">2.7Spring Cloud Security：安全工具包，为你的应用程序添加安全控制，主要</h3><p>是指OAuth2。</p><h3 id="2-8Spring-Cloud-Consul：封装了Consul-操作，consul-是一个服务发现与配">2.8Spring Cloud Consul：封装了Consul 操作，consul 是一个服务发现与配</h3><p>置工具，与Docker 容器可以无缝集成。</p><h3 id="2-9Spring-Cloud-Zookeeper-：-操作Zookeeper-的工具包，-用于使用">2.9Spring Cloud Zookeeper ： 操作Zookeeper 的工具包， 用于使用</h3><p>zookeeper 方式的服务注册和发现。</p><h3 id="2-10Spring-Cloud-Stream：数据流操作开发包，封装了与Redis-Rabbit、">2.10Spring Cloud Stream：数据流操作开发包，封装了与Redis,Rabbit、</h3><p>Kafka 等发送接收消息。</p><h3 id="2-11Spring-Cloud-CLI：基于Spring-Boot-CLI，可以让你以命令行方式快速">2.11Spring Cloud CLI：基于Spring Boot CLI，可以让你以命令行方式快速</h3><p>建立云组件。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-概念定义&quot;&gt;1.概念定义&lt;/h2&gt;
&lt;p&gt;SpringCloud是一个微服务框架，相比Dubbo等RPC框架,&lt;strong&gt;SpringCloud提供了全套的分布式系统解决方案&lt;/strong&gt;。&lt;br&gt;
　　Spring Cloud 对微服务基础框架Net
      
    
    </summary>
    
      <category term="SpringCloud" scheme="http://yoursite.com/blog/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://yoursite.com/blog/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 学习（10）</title>
    <link href="http://yoursite.com/blog/2019/05/28/SpringBoot%E5%AD%A6%E4%B9%A0%20%20(10)/"/>
    <id>http://yoursite.com/blog/2019/05/28/SpringBoot学习  (10)/</id>
    <published>2019-05-28T12:25:06.000Z</published>
    <updated>2019-05-28T13:45:54.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot定时任务">SpringBoot定时任务</h2><a id="more"></a><h2 id="Scheduled定时任务器">Scheduled定时任务器</h2><p>scheduled定时任务器：是Spring3.0以后自带的一个定时任务器</p><h3 id="添加定时Scheduled坐标">添加定时Scheduled坐标</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 添加Scheduled坐标 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="编写定时任务类">编写定时任务类</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Scheduled定时任务</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class ScheduledDemo {</span><br><span class="line">    /**</span><br><span class="line">         * 定时任务方法</span><br><span class="line">     *cron属性：cron表达式，定时任务触发是时间的一个字符串表达形式</span><br><span class="line">     */</span><br><span class="line">    @Scheduled(cron="0/2 * * * * ?")</span><br><span class="line">    public void scheduledMethod() {</span><br><span class="line">        System.out.println("定时任务器触发:"+new Date());</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="在启动类中添加定时任务的使用">在启动类中添加定时任务的使用</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableScheduling</span><br><span class="line">public class App {</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="SpringBoot整合Quartz定时任务框架">SpringBoot整合Quartz定时任务框架</h2><p>编写Quartz的配置类</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * 1.创建Job对象</span><br><span class="line">  */</span><br><span class="line"> @Bean</span><br><span class="line"> public JobDetailFactoryBean jobDetailFactoryBean() {</span><br><span class="line">     JobDetailFactoryBean factory = new JobDetailFactoryBean();</span><br><span class="line">     // 关联Job类</span><br><span class="line">     factory.setJobClass(QuartzDemo.class);</span><br><span class="line">     return factory;</span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">  * 2.创建Trigger对象 简单的trig</span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line"> @Bean</span><br><span class="line"> public SimpleTriggerFactoryBean simpleTriggerFactoryBean(</span><br><span class="line">         JobDetailFactoryBean jobDetailFactoryBean) {</span><br><span class="line">     SimpleTriggerFactoryBean factory = new SimpleTriggerFactoryBean();</span><br><span class="line">     // 关联JobDetail对象</span><br><span class="line">     factory.setJobDetail(jobDetailFactoryBean.getObject());</span><br><span class="line">     // 该参数表示一个执行的毫秒数</span><br><span class="line">     factory.setRepeatInterval(2000);</span><br><span class="line">     // 重复次数</span><br><span class="line">     factory.setRepeatCount(5);</span><br><span class="line">     return factory;</span><br><span class="line"> }</span><br><span class="line"> </span><br><span class="line"> /**</span><br><span class="line">  * 3.创建Scheduler对象</span><br><span class="line">  */</span><br><span class="line"> @Bean</span><br><span class="line"> public SchedulerFactoryBean schedulerFactoryBean(SimpleTriggerFactoryBean simpleTriggerFactoryBean) {</span><br><span class="line">     SchedulerFactoryBean factory=new SchedulerFactoryBean();</span><br><span class="line"></span><br><span class="line">     //关联trigger</span><br><span class="line">     factory.setTriggers(simpleTriggerFactoryBean.getObject());</span><br><span class="line">     return factory;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SpringBoot定时任务&quot;&gt;SpringBoot定时任务&lt;/h2&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/blog/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/blog/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JDBC style parameters (?) are not supported for JPA queries.</title>
    <link href="http://yoursite.com/blog/2019/05/26/queries/"/>
    <id>http://yoursite.com/blog/2019/05/26/queries/</id>
    <published>2019-05-26T03:42:06.000Z</published>
    <updated>2019-05-26T03:56:50.469Z</updated>
    
    <content type="html"><![CDATA[<p>执行HQL语句时</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Query("from Users where name = ?") </span><br><span class="line">List&lt;Users&gt; queryByNameUseHQL(String name);</span><br></pre></td></tr></tbody></table></figure><p>出现错误</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalArgumentException: JDBC style parameters (?) are not supported for JPA queries.</span><br></pre></td></tr></tbody></table></figure><p>在该版本中不支持’?'了<br>改为</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Query("from Users where name =:name") </span><br><span class="line">   List&lt;Users&gt; queryByNameUseHQL(String name);</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;执行HQL语句时&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;
      
    
    </summary>
    
      <category term="日常问题" scheme="http://yoursite.com/blog/categories/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="日常问题" scheme="http://yoursite.com/blog/tags/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习（9）</title>
    <link href="http://yoursite.com/blog/2019/05/24/SpringBoot%E5%AD%A6%E4%B9%A0%20%20(9)/"/>
    <id>http://yoursite.com/blog/2019/05/24/SpringBoot学习  (9)/</id>
    <published>2019-05-24T12:26:57.000Z</published>
    <updated>2019-05-27T15:12:43.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot-整合Spring-Data-JPA">SpringBoot 整合Spring Data JPA</h2><a id="more"></a><h3 id="Spring-Data-JPA介绍">Spring Data JPA介绍</h3><p>Spring Data JPA:Spring提供的一个操作数据的框架。基于JPA的标准对数据进行操作，简化操作持久层的代码，只需要编写接口就可以。</p><h3 id="SpringBoot-整合Spring-Data-JPA-v2">SpringBoot 整合Spring Data JPA</h3><h4 id="1-pom文件配置">1.pom文件配置</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;com.serendipity&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;19-spring-boot-jpa&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;!-- Inherit defaults from Spring Boot --&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.1.4.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;!-- springBoot的启动器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- springBoot的启动器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- springBoot的启动器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 测试工具的启动器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- mysql --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- druid连接池 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.10&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Spring Boot缓存支持启动器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 修改JDK版本 --&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="2-添加全局配置文件">2.添加全局配置文件</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/ssm?serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123456</span><br><span class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">mybatis.type-aliases-package=com.serendipity.pojo</span><br><span class="line"></span><br><span class="line">#正向工程</span><br><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line">#控制台输出sql语句</span><br><span class="line">spring.jpa.show-sql=true</span><br></pre></td></tr></tbody></table></figure><h4 id="3-创建实体类">3.创建实体类</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">@Entity //实体类注解</span><br><span class="line">@Table(name="t_users") //对应表名</span><br><span class="line">public class Users  {</span><br><span class="line"></span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue(strategy=GenerationType.IDENTITY) //主键生成策略</span><br><span class="line">    @Column(name="id")  //1.对象id和数据库字段对应 2.正向工程生成数据库的字段</span><br><span class="line">    private Integer id;</span><br><span class="line">    </span><br><span class="line">    @Column(name="name")</span><br><span class="line">    private String name;</span><br><span class="line">    </span><br><span class="line">    @Column(name="age")</span><br><span class="line">    private Integer age;</span><br><span class="line">    </span><br><span class="line">    @Column(name="address")</span><br><span class="line">    private String address;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    public Integer getId() {</span><br><span class="line">        return id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) {</span><br><span class="line">        this.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public String getName() {</span><br><span class="line">        return name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setName(String name) {</span><br><span class="line">        this.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public Integer getAge() {</span><br><span class="line">        return age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setAge(Integer age) {</span><br><span class="line">        this.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public String getAddress() {</span><br><span class="line">        return address;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setAddress(String address) {</span><br><span class="line">        this.address = address;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() {</span><br><span class="line">        return "Users [id=" + id + ", name=" + name + ", age=" + age + ", address=" + address + "]";</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="4-编写dao接口">4.编写dao接口</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> * 参数一 T :当前需要映射的实体</span><br><span class="line"> * 参数二 ID :当前映射的实体中的OID的类型</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public interface UsersRepository extends JpaRepository&lt;Users,Integer&gt;{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="5-编写测试类">5.编写测试类</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@SpringBootTest(classes=App.class)</span><br><span class="line">public class UsersRepositoryTest {</span><br><span class="line">        </span><br><span class="line">    @Autowired</span><br><span class="line">    private UsersRepository usersRepository;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void testSave() {</span><br><span class="line">        Users users = new Users();</span><br><span class="line">        users.setAddress("china");</span><br><span class="line">        users.setAge(20);</span><br><span class="line">        users.setName("tom");</span><br><span class="line">        usersRepository.save(users);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行测试方法，数据库会创建t_user表，并加入对应的数据。</p><h3 id="Spring-Data-JPA-提供的核心接口">Spring Data JPA 提供的核心接口</h3><p>1.Repository接口<br>2.CrudRepository接口<br>3.PagingAndSortingRepository接口<br>4.JpaRepository<br>5.JPASpecificationExecutor接口</p><h3 id="Repository接口">Repository接口</h3><h4 id="1-提供方法名称命名查询方式">1.提供方法名称命名查询方式</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Repository接口的方法名称命名查询</span><br><span class="line"> */</span><br><span class="line">public interface UsersRepositoryByName extends Repository&lt;Users, Integer&gt; {</span><br><span class="line">    /**</span><br><span class="line">     *方法的名称必须遵循驼峰式命名规则，findBy+属性名称(首字母大写)+查询条件(首字母大写)</span><br><span class="line">     */</span><br><span class="line">    List&lt;Users&gt; findByName(String name);</span><br><span class="line">    </span><br><span class="line">    List&lt;Users&gt; findByNameAndAge(String name,Integer age);</span><br><span class="line">    </span><br><span class="line">    List&lt;Users&gt; findByNameLike(String name);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试代码</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* Repository --方法名称命名测试</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void testFindByName() {</span><br><span class="line">    List&lt;Users&gt; list = usersRepositoryByName.findByName("tom");</span><br><span class="line">    for (Users users : list) {</span><br><span class="line">        System.out.println(users.toString());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">  </span><br><span class="line">@Test</span><br><span class="line">public void testFindByNameAndAge() {</span><br><span class="line">    List&lt;Users&gt; list = usersRepositoryByName.findByNameAndAge("tom",20);</span><br><span class="line">    for (Users users : list) {</span><br><span class="line">        System.out.println(users.toString());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testfindByNameLike() {</span><br><span class="line">    List&lt;Users&gt; list = usersRepositoryByName.findByNameLike("to%");</span><br><span class="line">    for (Users users : list) {</span><br><span class="line">        System.out.println(users.toString());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2-基于-Query注解查询与更新">2.基于@Query注解查询与更新</h4><p>接口</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * Repository @Query</span><br><span class="line"> */</span><br><span class="line">public interface UsersRepositoryQueryAnnotation extends Repository&lt;Users, Integer&gt; {</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    @Query("from Users where name =:name") </span><br><span class="line">    List&lt;Users&gt; queryByNameUseHQL(String name);</span><br><span class="line">     </span><br><span class="line">    </span><br><span class="line">    @Query(value="select * from t_users where name= ?",nativeQuery=true)</span><br><span class="line">    List&lt;Users&gt; queryByNameUseSQL(String name);</span><br><span class="line">    </span><br><span class="line">    @Query("update Users set name=:name where id=:id")</span><br><span class="line">    @Modifying //需要执行一个更新操作</span><br><span class="line">    void updateUsersNameById(String name,Integer id);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试代码</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * Query测试</span><br><span class="line">    */</span><br><span class="line">   </span><br><span class="line">   @Test</span><br><span class="line">   public void queryByNameUseHQL() {</span><br><span class="line">       List&lt;Users&gt; list = usersRepositoryQueryAnnotation.queryByNameUseHQL("tom");</span><br><span class="line">       for (Users users : list) {</span><br><span class="line">           System.out.println(users.toString());</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line">   @Test</span><br><span class="line">   public void queryByNameUserHQL() {</span><br><span class="line">       List&lt;Users&gt; list = usersRepositoryQueryAnnotation.queryByNameUseSQL("tom");</span><br><span class="line">       for (Users users : list) {</span><br><span class="line">           System.out.println(users.toString());</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line">   @Test</span><br><span class="line">   @Transactional</span><br><span class="line">   public void updateUsersNameById() {</span><br><span class="line">      usersRepositoryQueryAnnotation.updateUsersNameById("tomttt",1);</span><br><span class="line">      </span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h3 id="CrudRepository接口">CrudRepository接口</h3><p>CrudRepository接口，主要时完成一些增删改查的操作。<strong>注意:CrudRepository接口继承Repository接口</strong><br>该接口的方法：<br><img src="/images/SpringBoot/SpringBoot16.bmp" alt=""><br>接口：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * CrudRepository接口</span><br><span class="line"> */</span><br><span class="line">public interface UsersRepositoryCrudRepository extends CrudRepository&lt;Users, Integer&gt; {</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试代码</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * CrudRepository测试查询</span><br><span class="line">   */</span><br><span class="line">  @Test</span><br><span class="line">  public void testCrudRepositoryFindOne() {</span><br><span class="line">    </span><br><span class="line">      Optional&lt;Users&gt; users = usersRepositoryCrudRepository.findById(3);</span><br><span class="line">      System.out.println(users);</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  @Test</span><br><span class="line">  public void testCrudRepositoryFindAll() {</span><br><span class="line">      Iterable&lt;Users&gt; list = usersRepositoryCrudRepository.findAll();</span><br><span class="line">      for (Users users : list) {</span><br><span class="line">          System.out.println(users);</span><br><span class="line">      }</span><br><span class="line">      </span><br><span class="line">  }</span><br><span class="line">  @Test</span><br><span class="line">  public void testCrudRepositoryDeleteById() {</span><br><span class="line">     usersRepositoryCrudRepository.deleteById(3);</span><br><span class="line">      </span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><h3 id="PaginAndSortingRepository接口">PaginAndSortingRepository接口</h3><p>该接口提供了分页与排序的操作。该接口继承了PagingAndSortingRepository接口<br>该接口的方法<br><img src="/images/SpringBoot/SpringBoot15.bmp" alt=""></p><p>测试接口：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface UsersRepositoryPagingAndSorting extends PagingAndSortingRepository&lt;Users, Integer&gt;{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * PagingAndSorting 排序测试</span><br><span class="line">   */</span><br><span class="line">  @Test</span><br><span class="line">  public void testUsersRepositoryPagingAndSorting() {</span><br><span class="line"></span><br><span class="line">      // Order定义排序规则</span><br><span class="line">      Order order = new Order(Direction.DESC, "id");</span><br><span class="line">      // Sort对象封装了排序规则</span><br><span class="line">      Sort sort = new Sort(order);</span><br><span class="line">      Iterable&lt;Users&gt; list = usersRepositoryPagingAndSorting.findAll(sort);</span><br><span class="line">      for (Users users : list) {</span><br><span class="line">          System.out.println(users);</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  /**</span><br><span class="line">   * PagingAndSorting 分页测试</span><br><span class="line">   */</span><br><span class="line">  @Test</span><br><span class="line">  public void testUsersRepositoryPagingAndSortingPaging() {</span><br><span class="line">      //Pageable：封装了分页的参数，当前页，每页显示的参数。</span><br><span class="line">      //注意：当前页从0开始</span><br><span class="line">      Pageable pageable=new PageRequest(0, 1);</span><br><span class="line">      Page&lt;Users&gt; page = usersRepositoryPagingAndSorting.findAll(pageable);</span><br><span class="line">      System.out.println("总条数:"+page.getTotalElements());</span><br><span class="line">      System.out.println("总页数"+page.getTotalPages());</span><br><span class="line">      List&lt;Users&gt; content = page.getContent();</span><br><span class="line">      for (Users users : content) {</span><br><span class="line">          System.out.println(users);</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><h3 id="JpaRepository接口">JpaRepository接口</h3><p>该接口继承了PagingAndSortingRepository接口。对继承的父接口的方法的返回值进行适配<br>接口：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 参数一 T :当前需要映射的实体</span><br><span class="line"> * 参数二 ID :当前映射的实体中的OID的类型</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public interface UsersRepository extends JpaRepository&lt;Users,Integer&gt;{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="关联映射操作">关联映射操作</h3><h4 id="一对多的关联关系">一对多的关联关系</h4><p>需求:角色与用户的</p><p>users:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@ManyToOne</span><br><span class="line">@JoinColumn(name="roles_id") //维护外键</span><br><span class="line">   private Roles roles;</span><br><span class="line">   </span><br><span class="line">   public Roles getRoles() {</span><br><span class="line">        return roles;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">   public void setRoles(Roles roles) {</span><br><span class="line">        this.roles = roles;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SpringBoot-整合Spring-Data-JPA&quot;&gt;SpringBoot 整合Spring Data JPA&lt;/h2&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/blog/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/blog/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习（8）</title>
    <link href="http://yoursite.com/blog/2019/05/24/SpringBoot%E5%AD%A6%E4%B9%A0%20%20(8)/"/>
    <id>http://yoursite.com/blog/2019/05/24/SpringBoot学习  (8)/</id>
    <published>2019-05-24T11:51:58.000Z</published>
    <updated>2019-05-24T14:30:20.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot热部署">SpringBoot热部署</h2><a id="more"></a><h3 id="方式一-使用SpringLoader插件">方式一:使用SpringLoader插件</h3><p>在pom文件添加插件配置</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springloaded&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.5.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></tbody></table></figure><p>maven build配置<br><img src="/images/SpringBoot/SpringBoot14.bmp" alt=""></p><h3 id="方式二：使用Devtools工具">方式二：使用Devtools工具</h3><p>在pom文件添加devtools的依赖</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- DevTools --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">&lt;!-- 表示当前依赖不向下传递 --&gt;</span><br><span class="line">&lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><p>总结：<br>SpringLoader：SpringLoader 在部署项目时使用的是热部署的方式。但只对Java代码做部署处理，对页面无能为力。<br>DevTools：DevTools 在部署项目时使用的是重新部署的方式</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SpringBoot热部署&quot;&gt;SpringBoot热部署&lt;/h2&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/blog/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/blog/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习（7）</title>
    <link href="http://yoursite.com/blog/2019/05/23/SpringBoot%E5%AD%A6%E4%B9%A0%20%20(7)/"/>
    <id>http://yoursite.com/blog/2019/05/23/SpringBoot学习  (7)/</id>
    <published>2019-05-23T12:34:51.000Z</published>
    <updated>2019-05-23T14:08:50.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot中异常处理方式">SpringBoot中异常处理方式</h2><h3 id="1-SpringBoot-中对于异常处理提供了五种处理方式">1.SpringBoot 中对于异常处理提供了五种处理方式</h3><h4 id="1-1自定义错误页面">1.1自定义错误页面</h4><p>SpringBoot 默认的处理异常的机制：SpringBoot 默认的已经提供了一套处理异常的机制。<br>一旦程序中出现了异常SpringBoot 会像/error 的url 发送请求。在springBoot 中提供了一个<br>叫BasicExceptionController 来处理/error 请求，然后跳转到默认显示异常的页面来展示异常<br>信息。</p><p>如果我们需要将所有的异常同一跳转到自定义的错误页面， 需要再<br>src/main/resources/templates 目录下创建error.html 页面。<strong>注意：名称必须叫error</strong><br>自定义错误页面<br><img src="/images/SpringBoot/SpringBoot13.bmp" alt=""></p><h4 id="1-2-ExceptionHandle-注解处理异常">1.2@ExceptionHandle 注解处理异常</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@ExceptionHandler(value= {java.lang.ArithmeticException.class})</span><br><span class="line">   public ModelAndView ArithmeticExceptionHandler(Exception e) {</span><br><span class="line">         ModelAndView mv = new ModelAndView();</span><br><span class="line">         mv.addObject("error",e.toString());</span><br><span class="line">         mv.setViewName("error2");</span><br><span class="line">        return mv;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h4 id="1-3-ControllerAdvice-ExceptionHandler-注解处理异常">1.3@ControllerAdvice+@ExceptionHandler 注解处理异常</h4><p>需要创建一个能够处理异常的全局异常类。在该类上需要添加@ControllerAdvice 注解</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@ControllerAdvice</span><br><span class="line">public class GlobalException {</span><br><span class="line">    /**</span><br><span class="line">     * </span><br><span class="line">     * @param e 会将产生的异常对象注入到方法中</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @ExceptionHandler(value= {java.lang.ArithmeticException.class})</span><br><span class="line">    public ModelAndView ArithmeticExceptionHandler(Exception e) {</span><br><span class="line">            ModelAndView mv = new ModelAndView();</span><br><span class="line">            mv.addObject("error",e.toString());</span><br><span class="line">            mv.setViewName("error2");</span><br><span class="line">            return mv;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h4 id="1-4配置SimpleMappingExceptionResolver-处理异常">1.4配置SimpleMappingExceptionResolver 处理异常</h4><p>在全局异常类中添加一个方法完成异常的同一处理<br>只能做异常与视图映射，该方法不会返回异常信息</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class GlobalException {</span><br><span class="line">    /**</span><br><span class="line">     * 该方法有返回值</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">   public SimpleMappingExceptionResolver getExceptionResolver() {</span><br><span class="line">        SimpleMappingExceptionResolver resolver = new SimpleMappingExceptionResolver();</span><br><span class="line">        </span><br><span class="line">        Properties mappings=new Properties();</span><br><span class="line">        /**</span><br><span class="line">         * 参数一：异常的类型，必须是异常类型的全名</span><br><span class="line">         * 参数二：视图名称</span><br><span class="line">         */</span><br><span class="line">        mappings.put("java.lang.ArithmeticException", "error2");</span><br><span class="line">        mappings.put("java.lang.NullPointerException", "error3");</span><br><span class="line">        //设置异常与视图映射信息的</span><br><span class="line">        resolver.setExceptionMappings(mappings);</span><br><span class="line">    </span><br><span class="line">        return resolver;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="1-5自定义HandlerExceptionResolver-类处理异常">1.5自定义HandlerExceptionResolver 类处理异常</h4><p>需要再全局异常处理类中实现HandlerExceptionResolver 接口</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class GlobalException implements HandlerExceptionResolver{</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,</span><br><span class="line">            Object handler, Exception ex) {</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        ModelAndView mv = new ModelAndView();</span><br><span class="line">        //判断不同异常类型，做不同的视图跳转</span><br><span class="line">        if(ex instanceof ArithmeticException) {</span><br><span class="line">            mv.setViewName("error2");</span><br><span class="line">        }</span><br><span class="line">        if(ex instanceof NullPointerException) {</span><br><span class="line">            mv.setViewName("error3");</span><br><span class="line">        }</span><br><span class="line">        mv.addObject("error",ex.toString());</span><br><span class="line">        return mv;</span><br><span class="line">    }</span><br><span class="line">   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SpringBoot中异常处理方式&quot;&gt;SpringBoot中异常处理方式&lt;/h2&gt;
&lt;h3 id=&quot;1-SpringBoot-中对于异常处理提供了五种处理方式&quot;&gt;1.SpringBoot 中对于异常处理提供了五种处理方式&lt;/h3&gt;
&lt;h4 id=&quot;1-1自定义错误
      
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/blog/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/blog/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合mybatis</title>
    <link href="http://yoursite.com/blog/2019/05/22/SpringBoot%E5%AD%A6%E4%B9%A0%20%20(6)/"/>
    <id>http://yoursite.com/blog/2019/05/22/SpringBoot学习  (6)/</id>
    <published>2019-05-22T13:24:43.000Z</published>
    <updated>2019-05-23T11:41:42.965Z</updated>
    
    <content type="html"><![CDATA[<p>通过使用SpringBoot+SpringMVC+MyBatis 整合实现一个对数据库中的users 表的CRUD 的操作</p><a id="more"></a><h2 id="创建项目">创建项目</h2><h3 id="1-修改pom文件">1.修改pom文件</h3><p>加入mybatis启动器</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns="http://maven.apache.org/POM/4.0.0"</span><br><span class="line">xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="line">xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;groupId&gt;com.serendipity&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;08-spring-boot-springmvc-mybatis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Inherit defaults from Spring Boot --&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.1.4.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- Add typical dependencies for a web application --&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;!-- SpringBoot启动器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- Thymeleaf启动器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- Mybatis启动器 --&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- mysql数据库驱动 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- druid数据库连接池 --&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.10&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 修改JDK版本 --&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="2-添加application-properties全局配置文件">2.添加application.properties全局配置文件</h3><p>其中mysql的驱动为com.mysql.cj.jdbc.Driver</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/ssm?serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123456</span><br><span class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">mybatis.type-aliases-package=com.serendipity.pojo</span><br></pre></td></tr></tbody></table></figure><h3 id="3-数据库表设计">3.数据库表设计</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `users` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `age` int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></tbody></table></figure><h2 id="添加用户">添加用户</h2><h3 id="1-创建实体类">1.创建实体类</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Users {</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    public Integer getId() {</span><br><span class="line">        return id;</span><br><span class="line">    }</span><br><span class="line">    public void setId(Integer id) {</span><br><span class="line">        this.id = id;</span><br><span class="line">    }</span><br><span class="line">    public String getName() {</span><br><span class="line">        return name;</span><br><span class="line">    }</span><br><span class="line">    public void setName(String name) {</span><br><span class="line">        this.name = name;</span><br><span class="line">    }</span><br><span class="line">    public Integer getAge() {</span><br><span class="line">        return age;</span><br><span class="line">    }</span><br><span class="line">    public void setAge(Integer age) {</span><br><span class="line">        this.age = age;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-创建mapper接口">2.创建mapper接口</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public interface UsersService {</span><br><span class="line">    /**</span><br><span class="line">     * 添加用户</span><br><span class="line">     * @param users</span><br><span class="line">     */</span><br><span class="line">    void addUser(Users users);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-创建映射文件">3.创建映射文件</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span><br><span class="line">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace="com.serendipity.mapper.UsersMapper"&gt;</span><br><span class="line">&lt;insert id="insertUser" parameterType="users"&gt;</span><br><span class="line">insert into users(name,age) values(#{name},#{age})</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="4-创建业务层">4.创建业务层</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">@Transactional</span><br><span class="line">public class UsersServiceImpl implements UsersService {</span><br><span class="line">    </span><br><span class="line">    @Autowired</span><br><span class="line">   private UsersMapper usersMapper;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void addUser(Users users) {</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        usersMapper.insertUser(users);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-创建Controller">5.创建Controller</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping("/users")</span><br><span class="line">public class UsersController {</span><br><span class="line">    @Autowired</span><br><span class="line">    private UsersService usersService;</span><br><span class="line">    /**</span><br><span class="line">          * 页面跳转</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping("/{page}")</span><br><span class="line">    public String showPage(@PathVariable String page) {</span><br><span class="line">        return page;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     *     添加用户</span><br><span class="line">     */</span><br><span class="line">    </span><br><span class="line">    @RequestMapping("/addUser")</span><br><span class="line">    public String addUser(Users users) {</span><br><span class="line">        usersService.addUser(users);</span><br><span class="line">        return "ok";</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="6-前台页面">6.前台页面</h3><h4 id="成功页面">成功页面</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset="UTF-8"&gt;</span><br><span class="line">&lt;title&gt;操作提示页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">操作成功！！！</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="添加页面">添加页面</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset="UTF-8"&gt;</span><br><span class="line">&lt;title&gt;添加用户&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form th:action="@{/users/addUser}" method="post"&gt;</span><br><span class="line">用户姓名：&lt;input type="text" name="name"/&gt;&lt;br/&gt;</span><br><span class="line">用户年龄：&lt;input type="text" name="age"/&gt;&lt;br/&gt;</span><br><span class="line">&lt;input type="submit" value="确定"/&gt;&lt;br/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="7-启动类">7.启动类</h3><p>加上扫描Mapper接口的注解</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@MapperScan("com.serendipity.mapper")   //用于扫描Mybatis的Mapper接口</span><br><span class="line">public class App {</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>项目链接：<a href="https://github.com/SerendipityH/SpringBoot/tree/master/08-spring-boot-springmvc-mybatis" target="_blank" rel="noopener">https://github.com/SerendipityH/SpringBoot/tree/master/08-spring-boot-springmvc-mybatis</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过使用SpringBoot+SpringMVC+MyBatis 整合实现一个对数据库中的users 表的CRUD 的操作&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/blog/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/blog/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习（5）</title>
    <link href="http://yoursite.com/blog/2019/05/21/SpringBoot%E5%AD%A6%E4%B9%A0%20%20(5)/"/>
    <id>http://yoursite.com/blog/2019/05/21/SpringBoot学习  (5)/</id>
    <published>2019-05-21T12:26:36.000Z</published>
    <updated>2019-05-21T14:44:34.323Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot整合Thymeleaf">SpringBoot整合Thymeleaf</h3><h3 id="Thymeleaf基本使用">Thymeleaf基本使用</h3><p>1.在原来pom文件的基础加上</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Thymeleaf启动器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><p>2.创建存放视图的目录<br>目录位置：src/main/resources/templates<br>templates：该目录是安全的。意味着该目录下的内容是不允许外界直接访问的。<br><img src="/images/SpringBoot/SpringBoot11.bmp" alt=""></p><p>3.Thymeleaf 的基本使用<br>Thymelaef 是通过他特定语法对html 的标记做渲染</p><p>编写Controller</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class DemoController {</span><br><span class="line">           </span><br><span class="line">    @RequestMapping("/show")</span><br><span class="line">    public String showInfo(Model model) {</span><br><span class="line">        model.addAttribute("msg", "Thymeleaf 第一个案例");</span><br><span class="line">        return "index";</span><br><span class="line">    }   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>创建视图.html</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset="UTF-8"&gt;</span><br><span class="line">&lt;title&gt;Thymeleaf入门&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;span th:text="Hello"&gt;&lt;/span&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;span th:text="${msg}"&gt;&lt;/span&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>4.测试<br><img src="/images/SpringBoot/SpringBoot12.bmp" alt=""></p><hr><h3 id="Thymeleaf语法详解">Thymeleaf语法详解</h3><blockquote><h4 id="变量输出">变量输出</h4><ul><li>在页面中输出值</li></ul><blockquote><p>th:text</p></blockquote><ul><li>可以将一个值放入到input标签的value中</li></ul><blockquote><p>th:value</p></blockquote></blockquote><h4 id="字符串操作">字符串操作</h4><p>1.判断字符串是否为空，如果为空返回true，否则返回false</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span th:text="${#strings.isEmpty(msg)}"&gt;&lt;/span&gt;</span><br></pre></td></tr></tbody></table></figure><p>2.判断字符串是否包含指定的子串，如果包含返回true，否则返回false</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span th:text="${#strings.contains(msg,'T')}"&gt;&lt;/span&gt;</span><br></pre></td></tr></tbody></table></figure><p>3.判断当前字符串是否以子串开头，如果是返回true，否则返回false</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span th:text="${#strings.startsWith(msg,'T')}"&gt;&lt;/span&gt;</span><br></pre></td></tr></tbody></table></figure><p>4.判断当前字符串是否以子串结尾，如果是返回true，否则返回false</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span th:text="${#strings.endsWith(msg,'T')}"&gt;&lt;/span&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="日期格式化处理">日期格式化处理</h4><p>1.格式化日期，默认的以浏览器默认语言为格式化标准</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span th:text="${#dates.format(key)}"&gt;&lt;/span&gt;</span><br></pre></td></tr></tbody></table></figure><p>2.按照自定义的格式做日期转换</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span th:text="${#dates.format(key,'yyy/MM/dd')}"&gt;&lt;/span&gt;</span><br></pre></td></tr></tbody></table></figure><p>3.取年月日</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;span th:text="${#dates.year(key)}"&gt;&lt;/span&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;span th:text="${#dates.month(key)}"&gt;&lt;/span&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;span th:text="${#dates.day(key)}"&gt;&lt;/span&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="条件判断">条件判断</h4><p>使用th:if</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;span th:if="${sex}=='男'"&gt;</span><br><span class="line">性别：男</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;span th:if="${sex}=='女'"&gt;</span><br><span class="line">性别：女</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></tbody></table></figure><p>使用th:case</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div th:switch="${id}"&gt;</span><br><span class="line">&lt;span th:case="1"&gt;1&lt;/span&gt;</span><br><span class="line">&lt;span th:case="2"&gt;2&lt;/span&gt;</span><br><span class="line">&lt;span th:case="3"&gt;3&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="域对象操作">域对象操作</h4><pre><code>Request:&lt;span th:text="${#httpServletRequest.getAttribute('req')}"&gt;&lt;/span&gt;&lt;br/&gt;Session:&lt;span th:text="${session.sess}"&gt;&lt;/span&gt;&lt;br/&gt;Application:&lt;span th:text="${application.app}"&gt;&lt;/span&gt;</code></pre><p>代码地址：<a href="https://github.com/SerendipityH/SpringBoot" target="_blank" rel="noopener">https://github.com/SerendipityH/SpringBoot</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SpringBoot整合Thymeleaf&quot;&gt;SpringBoot整合Thymeleaf&lt;/h3&gt;
&lt;h3 id=&quot;Thymeleaf基本使用&quot;&gt;Thymeleaf基本使用&lt;/h3&gt;
&lt;p&gt;1.在原来pom文件的基础加上&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/blog/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/blog/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring解析(1)</title>
    <link href="http://yoursite.com/blog/2019/05/16/Spring%E8%A7%A3%E6%9E%90-1/"/>
    <id>http://yoursite.com/blog/2019/05/16/Spring解析-1/</id>
    <published>2019-05-16T11:36:33.000Z</published>
    <updated>2019-05-19T09:47:28.118Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-IOC底层原理">Spring IOC底层原理</h3><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans" target="_blank" rel="noopener">Spring官方原文</a></p><a id="more"></a><p>Spring容器初始化流程<br>ApplicationContext 容器的初始化流程主要由AbstractApplicationContext 类中的refresh<br>方法实现</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void refresh() throws BeansException, IllegalStateException {</span><br><span class="line">synchronized (this.startupShutdownMonitor) {</span><br><span class="line">// Prepare this context for refreshing.</span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line">// Tell the subclass to refresh the internal bean factory.</span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">// Prepare the bean factory for use in this context.</span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">try {</span><br><span class="line">// Allows post-processing of the bean factory in context subclasses.</span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">// Invoke factory processors registered as beans in the context.</span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">// Register bean processors that intercept bean creation.</span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">// Initialize message source for this context.</span><br><span class="line">initMessageSource();</span><br><span class="line"></span><br><span class="line">// Initialize event multicaster for this context.</span><br><span class="line">initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">// Initialize other special beans in specific context subclasses.</span><br><span class="line">onRefresh();</span><br><span class="line"></span><br><span class="line">// Check for listener beans and register them.</span><br><span class="line">registerListeners();</span><br><span class="line"></span><br><span class="line">// Instantiate all remaining (non-lazy-init) singletons.</span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">// Last step: publish corresponding event.</span><br><span class="line">finishRefresh();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">catch (BeansException ex) {</span><br><span class="line">if (logger.isWarnEnabled()) {</span><br><span class="line">logger.warn("Exception encountered during context initialization - " +</span><br><span class="line">"cancelling refresh attempt: " + ex);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// Destroy already created singletons to avoid dangling resources.</span><br><span class="line">destroyBeans();</span><br><span class="line"></span><br><span class="line">// Reset 'active' flag.</span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">// Propagate exception to caller.</span><br><span class="line">throw ex;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">finally {</span><br><span class="line">// Reset common introspection caches in Spring's core, since we</span><br><span class="line">// might not ever need metadata for singleton beans anymore...</span><br><span class="line">resetCommonCaches();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="一">一</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">synchronized (this.startupShutdownMonitor)</span><br></pre></td></tr></tbody></table></figure><p>在spring中，构建容器的过程都是同步的。同步操作是为了保证容器构建过程中，不出现多线程资源的冲突问题<br>通过synchronized同步代码块实现</p><h3 id="二">二</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Prepare this context for refreshing.</span><br><span class="line">prepareRefresh();</span><br></pre></td></tr></tbody></table></figure><p>上下文的预加载，解析配置文件</p><h3 id="三">三</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Tell the subclass to refresh the internal bean factory.</span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br></pre></td></tr></tbody></table></figure><p>创建BeanFactory。</p><h3 id="四">四</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Prepare the bean factory for use in this context.</span><br><span class="line">prepareBeanFactory(beanFactory);</span><br></pre></td></tr></tbody></table></figure><p>创建BeanFactory中管理的bean对象</p><h3 id="五">五</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Allows post-processing of the bean factory in context subclasses.</span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br></pre></td></tr></tbody></table></figure><p>加载配置中BeanFactory无法处理的内容</p><h3 id="六">六</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Invoke factory processors registered as beans in the context.</span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br></pre></td></tr></tbody></table></figure><p>将上一步加载的内容，作为一个容器可以管理的bean对象注册到ApplicationContext</p><h3 id="七">七</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Register bean processors that intercept bean creation.</span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br></pre></td></tr></tbody></table></figure><p>注册bean</p><h3 id="八">八</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Initialize message source for this context.</span><br><span class="line">initMessageSource();</span><br></pre></td></tr></tbody></table></figure><p>初始化国际化消息源</p><h3 id="九">九</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Initialize event multicaster for this context.</span><br><span class="line">initApplicationEventMulticaster();</span><br></pre></td></tr></tbody></table></figure><p>注册事件多播监听</p><h3 id="十">十</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Initialize other special beans in specific context subclasses.</span><br><span class="line">onRefresh();</span><br></pre></td></tr></tbody></table></figure><p>初始化主题资源</p><h3 id="十一">十一</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Check for listener beans and register them.</span><br><span class="line">registerListeners();</span><br></pre></td></tr></tbody></table></figure><p>创建监听器，并注册。</p><h3 id="十二">十二</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Instantiate all remaining (non-lazy-init) singletons.</span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">```</span><br><span class="line">初始化配置中出现的所有的lazy-init=false 的bean 对象。</span><br><span class="line">且bean 对象必须是singleton 的。</span><br><span class="line"></span><br><span class="line">### 十三</span><br></pre></td></tr></tbody></table></figure><p>// Last step: publish corresponding event.<br>finishRefresh();</p><pre><code>最后一步。发布最终事件</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-IOC底层原理&quot;&gt;Spring IOC底层原理&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring官方原文&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring学习" scheme="http://yoursite.com/blog/categories/Spring%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Spring源码" scheme="http://yoursite.com/blog/tags/Spring%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>java题集（1）</title>
    <link href="http://yoursite.com/blog/2019/04/23/java%E9%A2%98%E9%9B%86(1)/"/>
    <id>http://yoursite.com/blog/2019/04/23/java题集(1)/</id>
    <published>2019-04-23T12:34:35.000Z</published>
    <updated>2019-05-15T15:11:01.163Z</updated>
    
    <content type="html"><![CDATA[<p>1.进程与线程的区别与联系<br>进程是程序运行和资源分配的基本单位，一个程序至少有一个进程，一个进程至少有一个线程。<br>进程在执行过程中拥有独立的内存单元，而多个线程共享内存资源，减少切换次数，从而效率更高。<br>线程是进程的一个实体，是cpu调度和分派的基本单位，是比程序更小的能独立运行的基本单位。<br>同一进程中的多个线程之间可以并发执行。</p><p>2.进程的切换过程<br>使用时间片轮换的方式，CPU给每个任务都服务一定的时间，然后把当前任务的状态保存下来，在加载下一任务的状态后，<br>继续服务下一任务，任务的状态保存及再加载，这段过程就叫做上下文切换。</p><p>3.TCP建联的三次握手<br>第一次:客户端发送位码syn到服务器，并进入SYN_SENT状态，等待服务器确认；<br>第二次:服务器收到syn包后同意建立连接，向客户端发送一个ack，同时自己也发送一个syn包，此时服务器进入SYN_RECV状态；<br>第三次:客户端收到服务器的ack后进入ESTABLISHED状态，同时向服务器ack响应，服务器收到后确认也进入ESTABLISHED状态，完成三次握手。</p><p>为了实现可靠数据传输， TCP 协议的通信双方， 都必须维护一个序列号， 以标识发送出去的数据包中， 哪些是已经被对方收到的。 三次握手的过程即是通信双方相互告知序列号起始值， 并确认对方已经收到了序列号起始值的必经步骤。<br>三次握手就是为了建立双向链接。</p><p>4.TCP四次挥手<br>TCP建立连接要进行三次握手，而断开连接要进行四次。这是由于TCP的半关闭造成的。因为TCP连接是全双工的(即数据可在两个方向上同时传递)所以进行关闭时每个方向上都要单独进行关闭。这个单方向的关闭就叫半关闭。当一方完成它的数据发送任务，就发送一个FIN来向另一方通告将要终止这个方向的连接。</p><p>5.一次完整的Http请求<br>1.地址解析：如果客户端浏览器请求这个页面 <a href="http://localhost:8080/index.html%E4%BB%8E%E4%B8%AD%E5%88%86%E8%A7%A3%E5%87%BA%E5%8D%8F%E8%AE%AE%E5%90%8D%E3%80%81%E4%B8%BB%E6%9C%BA%E5%90%8D%E3%80%81%E7%AB%AF%E5%8F%A3%E3%80%81%E5%AF%B9%E8%B1%A1%E8%B7%AF%E5%BE%84%E7%AD%89%E9%83%A8%E5%88%86%EF%BC%8C%E8%A7%A3%E6%9E%90%E5%BE%97%E5%88%B0%E7%9A%84%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A" target="_blank" rel="noopener">http://localhost:8080/index.html从中分解出协议名、主机名、端口、对象路径等部分，解析得到的结果如下：</a><br>协议名：http<br>主机名：localhost<br>端口：8080<br>对象路径：/index.html<br>在这一步，需要域名系统DNS解析域名localhost，得到主机的IP地址。</p><p>2.封装HTTP请求数据包：把以上部分结合本机自己的信息，封装成一个HTTP请求数据包<br>3.封装成TCP包，建立TCP连接（TCP的三次握手）<br>4.客户机发送请求命令：建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是MIME信息包括请求修饰符、客户机信息和可内容。<br>5.服务器响应：服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是MIME信息包括服务器信息、实体信息和可能的内容。<br>6.服务器关闭TCP连接：一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码Connection:keep-alive，TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.进程与线程的区别与联系&lt;br&gt;
进程是程序运行和资源分配的基本单位，一个程序至少有一个进程，一个进程至少有一个线程。&lt;br&gt;
进程在执行过程中拥有独立的内存单元，而多个线程共享内存资源，减少切换次数，从而效率更高。&lt;br&gt;
线程是进程的一个实体，是cpu调度和分派的基本
      
    
    </summary>
    
      <category term="Java题集" scheme="http://yoursite.com/blog/categories/Java%E9%A2%98%E9%9B%86/"/>
    
    
      <category term="Java篇" scheme="http://yoursite.com/blog/tags/Java%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习（4）</title>
    <link href="http://yoursite.com/blog/2019/04/16/SpringBoot%E5%AD%A6%E4%B9%A0%20%20(4)/"/>
    <id>http://yoursite.com/blog/2019/04/16/SpringBoot学习  (4)/</id>
    <published>2019-04-16T13:59:43.000Z</published>
    <updated>2019-04-17T13:21:10.655Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot访问静态资源">SpringBoot访问静态资源</h3><h4 id="SpringBoot从classpath下访问">SpringBoot从classpath下访问</h4><p>目录名称必须为static<br><img src="/images/SpringBoot/SpringBoot7.bmp" alt=""><br><img src="/images/SpringBoot/SpringBoot8.bmp" alt=""></p><h4 id="ServletContext根目录">ServletContext根目录</h4><p>在src/main/webapp 目录名称必须为webapp<br>没有就新建一个<br><img src="/images/SpringBoot/SpringBoot9.bmp" alt=""></p><h3 id="SpringBoot-设置上传文件大小的默认值">SpringBoot 设置上传文件大小的默认值</h3><p>需要添加一个SpringBoot的配置文件<br>application.properties<br><img src="/images/SpringBoot/SpringBoot10.bmp" alt=""></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置单个上传文件的大小</span><br><span class="line">spring.http.multipart.maxFileSize=200MB</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置一次请求上传文件的总容量</span><br><span class="line">spring.http.multipart.maxRequestSize=200MB</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SpringBoot访问静态资源&quot;&gt;SpringBoot访问静态资源&lt;/h3&gt;
&lt;h4 id=&quot;SpringBoot从classpath下访问&quot;&gt;SpringBoot从classpath下访问&lt;/h4&gt;
&lt;p&gt;目录名称必须为static&lt;br&gt;
&lt;img src=
      
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/blog/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/blog/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JVM学习（3）</title>
    <link href="http://yoursite.com/blog/2019/04/14/JVM%E5%AD%A6%E4%B9%A0(3)/"/>
    <id>http://yoursite.com/blog/2019/04/14/JVM学习(3)/</id>
    <published>2019-04-14T11:01:40.000Z</published>
    <updated>2019-05-15T15:06:05.628Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java中都有哪些引用类型">Java中都有哪些引用类型</h3><p>Java中有四种引用类型：强引用、软引用、弱引用、虚引用</p><h4 id="强引用">强引用</h4><p>在Java中最常见的就是强引用，把一个对象赋给一个引用变量，这个引用变量就是一个强引用。当一个对象被强引用变量引用时，它处于可达状态，它是不可能被垃圾回收机制回收的，即使该对象以后永远都不会被用到JVM也不会回收。因此强引用是造成Java内存泄漏的主要原因之一。</p><h4 id="软引用">软引用</h4><p>软引用需要用SoftReference类来实现，对于只有软引用的对象来说，当系统内存足够时它不会被回收，当系统内存空间不足时它会被回收。软引用通常用在对内存敏感的程序中。</p><h4 id="弱引用">弱引用</h4><p>弱引用需要用WeakReference类来实现，它比软引用的生存期更短，对于只有弱引用的对象来说，只要垃圾回收机制一运行，不管JVM的内存空间是否足够，总会回收该对象占用的内存。</p><h4 id="虚引用">虚引用</h4><p>虚引用需要PhantomReference类来实现，它不能单独使用，必须和引用队列联合使用。虚引用的主要作用是跟踪对象被垃圾回收的状态。</p><h3 id="jvm的垃圾回收算法">jvm的垃圾回收算法</h3><h4 id="标记清除算法（Mark-Sweep）">标记清除算法（Mark-Sweep）</h4><p>最基础的垃圾回收算法，分为两个阶段，标注和清除。标记阶段标记出所有需要回收的对象，清除阶段回收被标记的对象所占用的空间。如图<br><img src="/images/java/jvm/jvm2.bmp" alt=""><br>　　从图中我们就可以发现，该算法最大的问题是内存碎片化严重，后续可能发生大对象不能找到可利用空间的问题。</p><h4 id="复制算法-copying">复制算法(copying)</h4><p>为了解决Mark-Sweep算法内存碎片化的缺陷而被提出的算法。按内存容量将内存划分为等大小的两块。每次只使用其中一块，当这一块内存满后将尚存活的对象复制到另一块上去，把已使用的内存清掉，如图：<br><img src="/images/java/jvm/jvm3.bmp" alt=""><br>　　这种算法虽然实现简单，内存效率高，不易产生碎片，但是最大的问题是可用内存被压缩到了原本的一半。且存活对象增多的话，Copying算法的效率会大大降低。</p><h4 id="标记整理算法-Mark-Compact">标记整理算法(Mark-Compact)</h4><p>结合了以上两个算法，为了避免缺陷而提出。标记阶段和Mark-Sweep算法相同，标记后不是清理对象，而是将存活对象移向内存的一端。然后清除端边界外的对象。如图：<br><img src="/images/java/jvm/jvm4.bmp" alt=""></p><h4 id="分代收集算法">分代收集算法</h4><p>分代收集法是目前大部分JVM所采用的方法，其核心思想是根据对象存活的不同生命周期将内存划分为不同的域，一般情况下将GC堆划分为老生代(Tenured/Old Generation)和新生代(Young Generation)。老生代的特点是每次垃圾回收时只有少量对象需要被回收，新生代的特点是每次垃圾回收时都有大量垃圾需要被回收，因此可以根据不同区域选择不同的算法。<br>　　目前大部分JVM的GC对于新生代都采取Copying算法，因为新生代中每次垃圾回收都要回收大部分对象，即要复制的操作比较少，但通常并不是按照1：1来划分新生代。一般将新生代划分为一块较大的Eden空间和两个较小的Survivor空间(From Space, To Space)，每次使用Eden空间和其中的一块Survivor空间，当进行回收时，将该两块空间中还存活的对象复制到另一块Survivor空间中。<br><img src="/images/java/jvm/jvm5.bmp" alt=""><br>　　而老生代因为每次只回收少量对象，因而采用Mark-Compact算法。另外，不要忘记在Java基础：Java虚拟机(JVM)中提到过的处于方法区的永生代(Permanet Generation)。它用来存储class类，常量，方法描述等。对永生代的回收主要包括废弃常量和无用的类。对象的内存分配主要在新生代的Eden Space和Survivor Space的From Space(Survivor目前存放对象的那一块)，少数情况会直接分配到老生代。当新生代的Eden Space和From Space空间不足时就会发生一次GC，进行GC后，Eden Space和From Space区的存活对象会被挪到To Space，然后将Eden Space和From Space进行清理。如果To Space无法足够存储某个对象，则将这个对象存储到老生代。在进行GC后，使用的便是Eden Space和To Space了，如此反复循环。当对象在Survivor区躲过一次GC后，其年龄就会+1。默认情况下年龄到达15的对象会被移到老生代中。</p><h3 id="jvm垃圾收集器">jvm垃圾收集器</h3><p>Java堆内存被划分为新生代和年老代两部分，新生代主要使用复制和标记-清除垃圾回收算法，年老代主要使用标记-整理垃圾回收算法，因此java虚拟中针对新生代和年老代分别提供了多种不同的垃圾收集器<br><img src="/images/java/jvm/jvm6.bmp" alt=""></p><h4 id="Serial垃圾收集器">Serial垃圾收集器</h4><p>Serial是最基本垃圾收集器，使用复制算法，曾经是JDK1.3.1之前新生代唯一的垃圾收集器。Serial是一个单线程的收集器，它不仅仅只会使用一个CPU或一条线程去完成垃圾收集工作，并且在进行垃圾收集的同时，必须暂停其他所有的工作线程，直到垃圾收集结束。<br>　　Serial垃圾收集器虽然在收集垃圾过程中需要暂停所有其他的工作线程，但是它简单高效，对于限定单个CPU环境来说，没有线程交互的开销，可以获得最高的单线程垃圾收集效率，因此Serial垃圾收集器依然是java虚拟机运行在Client模式下默认的新生代垃圾收集器。</p><h4 id="ParNew垃圾收集器">ParNew垃圾收集器</h4><p>ParNew垃圾收集器其实是Serial收集器的多线程版本，也使用复制算法，除了使用多线程进行垃圾收集之外，其余的行为和Serial收集器完全一样，ParNew垃圾收集器在垃圾收集过程中同样也要暂停所有其他的工作线程。<br>　　ParNew收集器默认开启和CPU数目相同的线程数，可以通过-XX:ParallelGCThreads参数来限制垃圾收集器的线程数。<br>　　ParNew虽然是除了多线程外和Serial收集器几乎完全一样，但是ParNew垃圾收集器是很多java虚拟机运行在Server模式下新生代的默认垃圾收集器。</p><h4 id="Parallel-Scavenge收集器">Parallel Scavenge收集器</h4><p>Parallel Scavenge收集器也是一个新生代垃圾收集器，同样使用复制算法，也是一个多线程的垃圾收集器，它重点关注的是程序达到一个可控制的吞吐量（Thoughput，CPU用于运行用户代码的时间/CPU总消耗时间，即吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)），高吞吐量可以最高效率地利用CPU时间，尽快地完成程序的运算任务，主要适用于在后台运算而不需要太多交互的任务。自适应调节策略也是ParallelScavenge收集器与ParNew收集器的一个重要区别。</p><h4 id="Serial-Old收集器">Serial Old收集器</h4><p>Serial Old是Serial垃圾收集器年老代版本，它同样是个单线程的收集器，使用标记-整理算法，这个收集器也主要是运行在Client默认的java虚拟机默认的年老代垃圾收集器。<br>　　在Server模式下，主要有两个用途：<br>　　1. 在JDK1.5之前版本中与新生代的Parallel Scavenge收集器搭配使用。<br>　　2. 作为年老代中使用CMS收集器的后备垃圾收集方案。</p><p>新生代Serial与年老代Serial Old搭配垃圾收集过程图：<br><img src="/images/java/jvm/jvm7.bmp" alt=""></p><p>新生代Parallel Scavenge收集器与ParNew收集器工作原理类似，都是多线程的收集器，都使用的是复制算法，在垃圾收集过程中都需要暂停所有的工作线程。<br>　　新生代Parallel Scavenge/ParNew与年老代Serial Old搭配垃圾收集过程图：<br><img src="/images/java/jvm/jvm8.bmp" alt=""></p><h4 id="Parallel-Old收集器">Parallel Old收集器</h4><p>Parallel Old收集器是Parallel Scavenge的年老代版本，使用多线程的标记-整理算法，在JDK1.6才开始提供。<br>　　在JDK1.6之前，新生代使用ParallelScavenge收集器只能搭配年老代的Serial Old收集器，只能保证新生代的吞吐量优先，无法保证整体的吞吐量，Parallel Old正是为了在年老代同样提供吞吐量优先的垃圾收集器，如果系统对吞吐量要求比较高，可以优先考虑新生代Parallel Scavenge和年老代Parallel Old收集器的搭配策略。<br>　　新生代Parallel Scavenge和年老代Parallel Old收集器搭配运行过程图：<br><img src="/images/java/jvm/jvm9.bmp" alt=""></p><h4 id="CMS收集器">CMS收集器</h4><p>Concurrent mark sweep(CMS)收集器是一种年老代垃圾收集器，其最主要目标是获取最短垃圾回收停顿时间，和其他年老代使用标记-整理算法不同，它使用多线程的标记-清除算法。 最短的垃圾收集停顿时间可以为交互比较高的程序提高用户体验。<br>　　CMS工作机制相比其他的垃圾收集器来说更复杂，整个过程分为以下4个阶段：<br>　　1. 初始标记：只是标记一下GC Roots能直接关联的对象，速度很快，仍然需要暂停所有的工作线程。<br>　　2. 并发标记：进行GC Roots跟踪的过程，和用户线程一起工作，不需要暂停工作线程。<br>　　3. 重新标记：为了修正在并发标记期间，因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，仍然需要暂停所有的工作线程。<br>　　4. 并发清除：清除GC Roots不可达对象，和用户线程一起工作，不需要暂停工作线程。由于耗时最长的并发标记和并发清除过程中，垃圾收集线程可以和用户现在一起并发工作，所以总体上来看CMS收集器的内存回收和用户线程是一起并发地执行。<br>　　CMS收集器工作过程：<br><img src="/images/java/jvm/jvm10.bmp" alt=""></p><h4 id="G1收集器">G1收集器</h4><p>Garbage first垃圾收集器是目前垃圾收集器理论发展的最前沿成果，相比与CMS收集器，G1收集器两个最突出的改进是：<br>　　1. 基于标记-整理算法，不产生内存碎片。<br>　　2. 可以非常精确控制停顿时间，在不牺牲吞吐量前提下，实现低停顿垃圾回收。 G1收集器避免全区域垃圾收集，它把堆内存划分为大小固定的几个独立区域，并且跟踪这些区域的垃圾收集进度，同时在后台维护一个优先级列表，每次根据所允许的收集时间，优先回收垃圾最多的区域。区域划分和优先级区域回收机制，确保G1收集器可以在有限时间获得最高的垃圾收集效率。</p><p>参考资料：Java架构师知识点整理</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java中都有哪些引用类型&quot;&gt;Java中都有哪些引用类型&lt;/h3&gt;
&lt;p&gt;Java中有四种引用类型：强引用、软引用、弱引用、虚引用&lt;/p&gt;
&lt;h4 id=&quot;强引用&quot;&gt;强引用&lt;/h4&gt;
&lt;p&gt;在Java中最常见的就是强引用，把一个对象赋给一个引用变量，这个引用变量就
      
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/blog/categories/JVM/"/>
    
    
      <category term="Java篇" scheme="http://yoursite.com/blog/tags/Java%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>为什么重写equals还要重写hashcode</title>
    <link href="http://yoursite.com/blog/2019/04/11/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%87%8D%E5%86%99equals%E8%BF%98%E8%A6%81%E9%87%8D%E5%86%99hashcode/"/>
    <id>http://yoursite.com/blog/2019/04/11/为什么重写equals还要重写hashcode/</id>
    <published>2019-04-11T00:38:22.000Z</published>
    <updated>2019-05-15T15:10:44.219Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么重写equals还要重写hashcode">为什么重写equals还要重写hashcode</h3><p>通过Student类举例说明</p><a id="more"></a><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public class Student {</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Student(String name, Integer age) {</span><br><span class="line">        super();</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object obj) {</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">        if (obj == null) {</span><br><span class="line">            return false;</span><br><span class="line">        }</span><br><span class="line">        if (obj == this) {</span><br><span class="line">            return true;</span><br><span class="line">        }</span><br><span class="line">        if (obj.getClass() != this.getClass()) {</span><br><span class="line">            return false;</span><br><span class="line">        }</span><br><span class="line">        Student student = (Student) obj;</span><br><span class="line">        if (name.equals(student.name) &amp;&amp; age == student.age) {</span><br><span class="line">            return true;</span><br><span class="line">        }</span><br><span class="line">        return false;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        Student student = new Student("Tom", 10);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = new HashMap&lt;&gt;();</span><br><span class="line">        hashMap.put(student, "X001");</span><br><span class="line">        System.out.println(hashMap.get(new Student("Tom", 10)));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在Student类中，重写了equals方法，通过name和age判断是否为同一人。<br>然后在将student对象作为key放入hashmap中，这时将学号作为value存入。<br>再调用hashmap的get方法通过key去寻找value,根据equals方法判断应为相同并且输出"X001"<br>但实际上输出为null<br><img src="/images/java/javase/equals.bmp" alt=""></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public V get(Object key) {</span><br><span class="line">       Node&lt;K,V&gt; e;</span><br><span class="line">       return (e = getNode(hash(key), key)) == null ? null : e.value;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line">    * Implements Map.get and related methods.</span><br><span class="line">    *</span><br><span class="line">    * @param hash hash for key</span><br><span class="line">    * @param key the key</span><br><span class="line">    * @return the node, or null if none</span><br><span class="line">    */</span><br><span class="line">   final Node&lt;K,V&gt; getNode(int hash, Object key) {</span><br><span class="line">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;</span><br><span class="line">       if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span><br><span class="line">           (first = tab[(n - 1) &amp; hash]) != null) {</span><br><span class="line">           if (first.hash == hash &amp;&amp; // always check first node</span><br><span class="line">               ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">               return first;</span><br><span class="line">           if ((e = first.next) != null) {</span><br><span class="line">               if (first instanceof TreeNode)</span><br><span class="line">                   return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">               do {</span><br><span class="line">                   if (e.hash == hash &amp;&amp;</span><br><span class="line">                       ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                       return e;</span><br><span class="line">               } while ((e = e.next) != null);</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">       return null;</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>通过HashMap的源码可以发现是先通过比较hash值，当hash值不相等时，返回值为null</p><p>加上重写hashcode方法</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public int hashCode() {</span><br><span class="line">       // TODO Auto-generated method stub</span><br><span class="line">       final int temp = 31;</span><br><span class="line">       int result = 1;</span><br><span class="line">       result = temp * result + ((name == null) ? 0 : name.hashCode());</span><br><span class="line">       result = temp * result + age;</span><br><span class="line">       return result;</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p><img src="/images/java/javase/equals2.bmp" alt=""><br>这时正常输出X001</p><p>根据 Java 规范，使用 equal() 方法来判断两个相等的对象，必须具有相同的 hashcode。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;为什么重写equals还要重写hashcode&quot;&gt;为什么重写equals还要重写hashcode&lt;/h3&gt;
&lt;p&gt;通过Student类举例说明&lt;/p&gt;
    
    </summary>
    
      <category term="Java题集" scheme="http://yoursite.com/blog/categories/Java%E9%A2%98%E9%9B%86/"/>
    
    
      <category term="Java篇" scheme="http://yoursite.com/blog/tags/Java%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习（3）</title>
    <link href="http://yoursite.com/blog/2019/04/10/SpringBoot%E5%AD%A6%E4%B9%A0%20%20(3)/"/>
    <id>http://yoursite.com/blog/2019/04/10/SpringBoot学习  (3)/</id>
    <published>2019-04-10T12:44:18.000Z</published>
    <updated>2019-10-23T15:25:42.423Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot整合Filter">SpringBoot整合Filter</h3><a id="more"></a><filter>  <filter-name>FirstFilter</filter-name>  <filter-class>com.serendipity.filter.FirstFilter</filter-class></filter><filter-mapping>   <filter-name>FirstFilter</filter-name>   <url-pattern>/first </url-pattern></filter-mapping><!-- more -->#### 通过在添加@WebFilter注解<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@WebFilter(filterName="FirstFilter",urlPatterns="/first")</span><br><span class="line">public class FirstFilter implements Filter {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)</span><br><span class="line">            throws IOException, ServletException {</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        System.out.println("进入Filter");</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">        System.out.println("离开Filter");</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="通过方法完成Filter组件注册">通过方法完成Filter组件注册</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public FilterRegistrationBean&lt;Filter&gt; getFilterRegistrationBean(){</span><br><span class="line">      FilterRegistrationBean&lt;Filter&gt; bean = new FilterRegistrationBean&lt;Filter&gt;(new SecondFilter());</span><br><span class="line">      //bean.addUrlPatterns(new String[] {"*.do","*.jsp"});</span><br><span class="line">      bean.addUrlPatterns("/first");</span><br><span class="line">      return bean;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SpringBoot整合Filter&quot;&gt;SpringBoot整合Filter&lt;/h3&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/blog/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/blog/tags/SpringBoot/"/>
    
  </entry>
  
</feed>
